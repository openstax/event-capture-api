=begin
#OpenStax Event Capture API

#The Event Capture API for OpenStax.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `[domain]/api/v0/events`. While the API does support a default version, that version will change over time and therefore should not be used in production code! 

OpenAPI spec version: 0.1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'date'

module Api::V0::Bindings
  class NudgedV1
    # The RFC 3339 section 5.6 date-time when nudge actually occurred.
    attr_accessor :client_clock_occurred_at

    # The RFC 3339 section 5.6 date-time when nudge event was sent to the server.
    attr_accessor :client_clock_sent_at

    # The data's type.
    attr_accessor :type

    # The User uuid.  Identifies the user in accounts.
    attr_accessor :user_uuid

    # The app sourcing the nudge (e.g., tutor.
    attr_accessor :app

    # The target of the nudge (e.g., study_guides).
    attr_accessor :target

    # The nudge context (e.g., a book uuid).
    attr_accessor :context

    # The nudge flavor (e.g., full screen v2).
    attr_accessor :flavor

    # The nudge medium (e.g., email).
    attr_accessor :medium

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'client_clock_occurred_at' => :'client_clock_occurred_at',
        :'client_clock_sent_at' => :'client_clock_sent_at',
        :'type' => :'type',
        :'user_uuid' => :'user_uuid',
        :'app' => :'app',
        :'target' => :'target',
        :'context' => :'context',
        :'flavor' => :'flavor',
        :'medium' => :'medium'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'client_clock_occurred_at' => :'DateTime',
        :'client_clock_sent_at' => :'DateTime',
        :'type' => :'String',
        :'user_uuid' => :'Object',
        :'app' => :'String',
        :'target' => :'String',
        :'context' => :'String',
        :'flavor' => :'String',
        :'medium' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'client_clock_occurred_at')
        self.client_clock_occurred_at = attributes[:'client_clock_occurred_at']
      end

      if attributes.has_key?(:'client_clock_sent_at')
        self.client_clock_sent_at = attributes[:'client_clock_sent_at']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'user_uuid')
        self.user_uuid = attributes[:'user_uuid']
      end

      if attributes.has_key?(:'app')
        self.app = attributes[:'app']
      end

      if attributes.has_key?(:'target')
        self.target = attributes[:'target']
      end

      if attributes.has_key?(:'context')
        self.context = attributes[:'context']
      end

      if attributes.has_key?(:'flavor')
        self.flavor = attributes[:'flavor']
      end

      if attributes.has_key?(:'medium')
        self.medium = attributes[:'medium']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @client_clock_occurred_at.nil?
        invalid_properties.push('invalid value for "client_clock_occurred_at", client_clock_occurred_at cannot be nil.')
      end

      if @client_clock_sent_at.nil?
        invalid_properties.push('invalid value for "client_clock_sent_at", client_clock_sent_at cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @user_uuid.nil?
        invalid_properties.push('invalid value for "user_uuid", user_uuid cannot be nil.')
      end

      if @app.nil?
        invalid_properties.push('invalid value for "app", app cannot be nil.')
      end

      if @target.nil?
        invalid_properties.push('invalid value for "target", target cannot be nil.')
      end

      if @context.nil?
        invalid_properties.push('invalid value for "context", context cannot be nil.')
      end

      if @flavor.nil?
        invalid_properties.push('invalid value for "flavor", flavor cannot be nil.')
      end

      if @medium.nil?
        invalid_properties.push('invalid value for "medium", medium cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @client_clock_occurred_at.nil?
      return false if @client_clock_sent_at.nil?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ['org.openstax.ec.nudged_v1'])
      return false unless type_validator.valid?(@type)
      return false if @user_uuid.nil?
      return false if @app.nil?
      return false if @target.nil?
      return false if @context.nil?
      return false if @flavor.nil?
      return false if @medium.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['org.openstax.ec.nudged_v1'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          client_clock_occurred_at == o.client_clock_occurred_at &&
          client_clock_sent_at == o.client_clock_sent_at &&
          type == o.type &&
          user_uuid == o.user_uuid &&
          app == o.app &&
          target == o.target &&
          context == o.context &&
          flavor == o.flavor &&
          medium == o.medium
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [client_clock_occurred_at, client_clock_sent_at, type, user_uuid, app, target, context, flavor, medium].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Api::V0::Bindings.const_get(type).new
        temp_model.tap{|tm| tm.build_from_hash(value)}
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
